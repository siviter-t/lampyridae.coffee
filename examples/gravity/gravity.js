// Generated by CoffeeScript 1.9.3

/*
 * Example usage of lampyridae.coffee with forces! (Gravity in this case)
 */

(function() {
  var canvas, i, k, options, particles, ref, total, updateAll, xMid, yMid;

  require('maths/forces');

  canvas = new Lampyridae.Canvas('world');

  particles = [];

  xMid = canvas.width() / 2;

  yMid = canvas.height() / 2;

  options = {
    bound: "none",
    vx: 2.5,
    vy: 0.0,
    colour: "#AB621D"
  };

  Lampyridae.Particle.prototype.enableGlow = true;

  options.x = xMid;

  options.radius = 3.0;

  options.y = yMid - 80;

  options.vx = 3.2;

  options.vy = 0.0;

  particles.push(new Lampyridae.Particle(canvas, options));

  options.radius = 5.0;

  options.y = yMid + 100;

  options.vx = -2.8;

  options.vy = 0.0;

  options.colour = "#A82310";

  particles.push(new Lampyridae.Particle(canvas, options));

  options.radius = 12;

  options.y = yMid + 280;

  options.vx = -1.7;

  options.vy = 0.0;

  options.colour = "#A82310";

  particles.push(new Lampyridae.Particle(canvas, options));

  options.y = yMid;

  options.radius = 7.0;

  options.x = xMid + 120;

  options.vx = 0;

  options.vy = 2.6;

  options.colour = "rgb(30, 60, 100)";

  particles.push(new Lampyridae.Particle(canvas, options));

  options.radius = 10.0;

  options.x = xMid + 160;

  options.vx = 0;

  options.vy = -2.3;

  options.colour = "rgb(157, 85, 60)";

  particles.push(new Lampyridae.Particle(canvas, options));

  options.radius = 40;

  options.x = xMid;

  options.y = yMid;

  options.vx = 0;

  options.vy = 0;

  options.mass = 800;

  options.colour = 0;

  options.stroke = 2;

  options.glow = 4;

  options.strokeColour = "rgb(255, 242, 204)";

  options.glowColour = "rgb(255, 242, 204)";

  particles.push(new Lampyridae.Particle(canvas, options));

  total = particles.length;

  for (i = k = 0, ref = total - 2; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
    Lampyridae.Forces.gravity(particles, i, total - 1);
  }

  updateAll = function() {
    var j, l, ref1, results;
    results = [];
    for (j = l = 0, ref1 = total - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; j = 0 <= ref1 ? ++l : --l) {
      results.push(particles[j].update());
    }
    return results;
  };


  /*
   * Lights, camera, action!
   */

  canvas.addUpdate(canvas.draw.clear);

  canvas.addUpdate(updateAll);

  canvas.animate();

}).call(this);
