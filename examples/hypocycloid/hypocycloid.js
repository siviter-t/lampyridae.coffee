// Generated by CoffeeScript 1.9.3

/*
 * Example usage of lampyridae.coffee
 */

(function() {
  var Settings, addGuiControls, canvas, ccc, circle, ctc, hslc, hslp, hypoeqs, hypox, hypoy, particle, pcc, presets, settings, update,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require('particle/paraparticle');

  require('util/colour/rgbToHsl');

  require('util/colour/hslToRgb');

  require('util/colour/decssify');

  require('util/colour/cssify');

  canvas = new Lampyridae.Canvas('world');

  Settings = (function() {
    function Settings() {
      this.changeGlow = bind(this.changeGlow, this);
      this.changeAlpha = bind(this.changeAlpha, this);
      this.changeCircleColour = bind(this.changeCircleColour, this);
      this.changeParticleColour = bind(this.changeParticleColour, this);
      this.changeRadii = bind(this.changeRadii, this);
      this.changeRate = bind(this.changeRate, this);
      this.changeCurve = bind(this.changeCurve, this);
      this.resetHypop = bind(this.resetHypop, this);
      this.SaveAsPNG = bind(this.SaveAsPNG, this);
      this.ClearScreen = bind(this.ClearScreen, this);
      this.max_radius = bind(this.max_radius, this);
    }

    Settings.prototype.particles = [];

    Settings.prototype.max_number = 2;

    Settings.prototype.max_radius = function() {
      return Math.floor(canvas.height() / 2);
    };

    Settings.prototype.Total = 2;

    Settings.prototype.Curve = 3;

    Settings.prototype.Rate = 0.01;

    Settings.prototype.Radius = 200;

    Settings.prototype.ParticleColour = "rgb(200, 200, 255)";

    Settings.prototype.CircleColour = "rgb(200, 200, 255)";

    Settings.prototype.CycleColour = false;

    Settings.prototype.CycleRate = 1;

    Settings.prototype.Alpha = 0.7;

    Settings.prototype.Glow = 0;

    Settings.prototype.DrawCircle = true;

    Settings.prototype.ClearScreen = function() {
      return canvas.draw.clear();
    };

    Settings.prototype.SaveAsPNG = function() {
      return download(canvas.getUriPNG(), 'hypocycloid-image-ts.png', 'image/png');
    };

    Settings.prototype.resetHypop = function() {
      this.particles[1].setVar(0);
      return this.particles[1].setPos(new Lampyridae.Vec2D(canvas.width() / 2, canvas.height() / 2 - this.Radius));
    };

    Settings.prototype.changeCurve = function() {
      return this.resetHypop;
    };

    Settings.prototype.changeRate = function(value) {
      return this.particles[1].setRate(value);
    };

    Settings.prototype.changeRadii = function(value) {
      this.particles[0].r = value;
      return this.resetHypop();
    };

    Settings.prototype.changeParticleColour = function(value) {
      return this.particles[1].colour = value;
    };

    Settings.prototype.changeCircleColour = function(value) {
      return this.particles[0].strokeColour = value;
    };

    Settings.prototype.changeAlpha = function(value) {
      return this.particles[1].alpha = value;
    };

    Settings.prototype.changeGlow = function(value) {
      return this.particles[1].glow = value;
    };

    return Settings;

  })();


  /*
   * Initial setup
   */

  settings = new Settings();

  settings.Radius = Math.floor(3 * settings.max_radius() / 4);

  circle = new Lampyridae.Particle(canvas, {
    x: canvas.width() / 2,
    y: canvas.height() / 2,
    radius: settings.Radius,
    colour: 0,
    stroke: 1,
    strokeColour: settings.CircleColour
  });

  settings.particles.push(circle);

  hypox = (function(_this) {
    return function(t, a, n) {
      return a * ((n - 1) * Math.cos(t) - Math.cos(t * (n - 1))) / n;
    };
  })(this);

  hypoy = (function(_this) {
    return function(t, a, n) {
      return a * ((n - 1) * Math.sin(t) + Math.sin(t * (n - 1))) / n + a;
    };
  })(this);

  hypoeqs = new Lampyridae.Para2D(hypox, hypoy);

  particle = new Lampyridae.Paraparticle(canvas, {
    x: canvas.width() / 2,
    y: canvas.height() / 2 - settings.Radius,
    radius: 1,
    psys: hypoeqs,
    colour: settings.ParticleColour,
    alpha: settings.Alpha
  });

  settings.particles.push(particle);

  ctc = true;

  pcc = void 0;

  hslp = [0, 0, 0];

  ccc = void 0;

  hslc = [0, 0, 0];

  update = function() {
    if (settings.DrawCircle) {
      settings.particles[0].update();
    }
    if (settings.CycleColour) {
      if (ctc) {
        hslp = Lampyridae.rgbToHsl(Lampyridae.decssify(settings.ParticleColour));
        hslc = Lampyridae.rgbToHsl(Lampyridae.decssify(settings.CircleColour));
        ctc = false;
      }
      hslp[0] = (hslp[0] + settings.CycleRate) % 360;
      hslc[0] = (hslc[0] + settings.CycleRate) % 360;
      settings.ParticleColour = Lampyridae.cssify('rgb', Lampyridae.hslToRgb(hslp));
      settings.CircleColour = Lampyridae.cssify('rgb', Lampyridae.hslToRgb(hslc));
      settings.changeParticleColour(settings.ParticleColour);
      settings.changeCircleColour(settings.CircleColour);
      pcc.updateDisplay();
      ccc.updateDisplay();
    } else {
      ctc = true;
    }
    return settings.particles[1].update(settings.Radius, settings.Curve);
  };


  /*
   * Lights, camera, action!
   */

  canvas.addUpdate(update);

  canvas.animate();


  /*
   * dat.gui
   */

  presets = {
    'preset': 'Deltoid',
    'remembered': {
      'Tusi Couple': {
        '0': {
          'Curve': 2,
          'Rate': 0.01,
          'Radius': 360,
          'ParticleColour': 'rgb(200, 200, 255)',
          'CircleColour': 'rgb(200, 200, 255)',
          'CycleColour': false,
          'CycleRate': 1,
          'Alpha': 0.6,
          'Glow': 0,
          'DrawCircle': true
        }
      },
      'Deltoid': {
        '0': {
          'Curve': 3,
          'Rate': 0.01,
          'Radius': 360,
          'ParticleColour': 'rgb(200, 200, 255)',
          'CircleColour': 'rgb(200, 200, 255)',
          'CycleColour': false,
          'CycleRate': 1,
          'Alpha': 0.6,
          'Glow': 0,
          'DrawCircle': true
        }
      },
      'Astroid': {
        '0': {
          'Curve': 4,
          'Rate': 0.01,
          'Radius': 360,
          'ParticleColour': 'rgb(200, 200, 255)',
          'CircleColour': 'rgb(200, 200, 255)',
          'CycleColour': false,
          'CycleRate': 1,
          'Alpha': 0.6,
          'Glow': 0,
          'DrawCircle': true
        }
      },
      'Pi': {
        '0': {
          'Curve': 3.14159265359,
          'Rate': 0.01,
          'Radius': 360,
          'ParticleColour': 'rgb(255,0,0)',
          'CircleColour': 'rgb(255,0,0)',
          'CycleColour': true,
          'CycleRate': 3.14,
          'Alpha': 0.4,
          'Glow': 1,
          'DrawCircle': true
        }
      },
      'Euler\'s number': {
        '0': {
          'Curve': 2.71828182846,
          'Rate': 0.04,
          'Radius': 360,
          'ParticleColour': 'rgb(198,218,164)',
          'CircleColour': 'rgb(198,218,164)',
          'CycleColour': true,
          'CycleRate': 2.72,
          'Alpha': 0.4,
          'Glow': 1,
          'DrawCircle': true
        }
      },
      'Heart': {
        '0': {
          'Curve': 0.5,
          'Rate': 0.02,
          'Radius': 120,
          'ParticleColour': 'rgb(255,40,100)',
          'CircleColour': 'rgb(255, 40, 100)',
          'CycleColour': false,
          'CycleRate': 1,
          'Alpha': 0.8,
          'Glow': 0,
          'DrawCircle': false
        }
      },
      '3-Leaf Clover': {
        '0': {
          'Curve': 0.75,
          'Rate': 0.02,
          'Radius': 200,
          'ParticleColour': 'rgb(10, 250, 5)',
          'CircleColour': 'rgb(10, 250, 5)',
          'CycleColour': false,
          'CycleRate': 1,
          'Alpha': 0.8,
          'Glow': 0,
          'DrawCircle': false
        }
      }
    },
    'closed': false,
    'folders': {
      'General': {
        'preset': 'Default',
        'closed': false,
        'folders': {}
      },
      'Drawing Style': {
        'preset': 'Default',
        'closed': true,
        'folders': {}
      }
    }
  };

  (addGuiControls = function() {
    var fD, fG, gui;
    gui = new dat.GUI({
      load: presets,
      preset: 'Deltoid'
    });
    gui.remember(settings);
    fG = gui.addFolder('General');
    fG.add(settings, 'Curve').step(0.01);
    fG.add(settings, 'Rate').min(0).max(3).step(0.001).onChange(settings.changeRate);
    fG.add(settings, 'Radius').min(10).max(settings.max_radius()).onChange(settings.changeRadii);
    fG.open();
    fD = gui.addFolder('Drawing Style');
    pcc = fD.addColor(settings, 'ParticleColour').onChange(settings.changeParticleColour);
    ccc = fD.addColor(settings, 'CircleColour').onChange(settings.changeCircleColour);
    fD.add(settings, 'CycleColour');
    fD.add(settings, 'CycleRate').min(0.1).max(7).step(0.01);
    fD.add(settings, 'Alpha').min(0).max(1).step(0.01).onChange(settings.changeAlpha);
    fD.add(settings, 'Glow').min(0).max(15).step(1).onChange(settings.changeGlow);
    fD.add(settings, 'DrawCircle');
    gui.add(settings, 'ClearScreen');
    return gui.add(settings, 'SaveAsPNG');
  })();

}).call(this);
